name: Build_armv7-immortal

on:
  workflow_dispatch:
  repository_dispatch:

jobs:
  build:
    name: Build Firmware
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 最长允许运行 6 小时，防止无限制执行

    steps:

      # 1. 拉取当前仓库（包含 armv7.config 和 customize.sh）
      - name: Checkout source
        uses: actions/checkout@v4

      # 2. 清理系统自带大文件，释放磁盘空间（约 6~8GB）
      - name: Clean system to free space
        run: |
          sudo rm -rf /usr/share/dotnet \
                      /usr/local/lib/android \
                      /opt/ghc \
                      /usr/local/share/boost \
                      /usr/local/share/gradle \
                      /usr/local/lib/node_modules

      # 3. 初始化构建环境并安装必要工具
      - name: Init build environment
        env:
          DEBIAN_FRONTEND: noninteractive  # 避免 apt 交互提示
        run: |
          # 初始化 ImmortalWrt 脚本
          sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          # 安装 qemu-utils、upx-ucl、uuid-dev 等
          sudo apt update
          sudo apt install -y qemu-utils upx-ucl uuid-dev

      # 4. 克隆 ImmortalWrt 并添加所有自定义 feeds
      - name: Clone and configure ImmortalWrt
        run: |
          git clone --depth=1 https://github.com/immortalwrt/immortalwrt immortalwrt
          cd immortalwrt
          # 添加额外 feed 源
          echo "src-git helloworld https://github.com/fw876/helloworld.git" >> feeds.conf.default
          sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
          sed -i '$a src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main' feeds.conf.default
          sed -i '$a src-git passwall_luci https://github.com/xiaorouji/openwrt-passwall.git;main' feeds.conf.default
          # 更新并安装所有 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 5. 应用配置文件 & 执行自定义脚本
      - name: Apply configuration and customize
        working-directory: ./immortalwrt
        run: |
          # 复制用户提供的 .config
          [ -e ../armv7.config ] && cp ../armv7.config .config
          # 如果存在 customize.sh，则赋予执行权限并运行
          [ -f ./customize.sh ] && chmod +x ./customize.sh && ./customize.sh
          # 自动补全配置项，确保 .config 与 feeds 一致
          make defconfig

      # 6. 下载所有依赖包并清理异常文件
      - name: Download packages
        working-directory: ./immortalwrt
        run: |
          make download -j$(nproc)
          # 删除小于 1KB 的无效文件
          find dl -type f -size -1024c -delete
          # 删除大于 100MB 的异常包
          find dl -type f -size +100M -delete

      # 7. 缓存 dl 目录，加速后续相同配置构建
      - name: Cache dl directory
        uses: actions/cache@v3
        with:
          path: immortalwrt/dl
          key: dl-armv7-${{ runner.os }}-${{ hashFiles('armv7.config') }}
          restore-keys: |
            dl-armv7-${{ runner.os }}-
            dl-armv7-

      # 8. 清理 dl 包目录，立即释放几十 GB 空间
      - name: Clean dl to free space
        run: rm -rf immortalwrt/dl

      # 9. 构建前检查磁盘使用情况，便于调试
      - name: Check disk usage before build
        run: df -h && du -sh immortalwrt

      # 10. 编译固件，日志写入文件，仅在失败时打印尾部
      - name: Build firmware
        working-directory: ./immortalwrt
        run: |
          echo "Building with $(nproc) threads"
          # 将完整日志存到 build.log，构建失败时展示最后 200 行
          make -j$(($(nproc)+1)) > build.log 2>&1 || (tail -n200 build.log && exit 1)

      # 11. 构建后检查磁盘使用情况，确认产物大小
      - name: Check disk usage after build
        run: df -h && du -sh immortalwrt/bin/targets

      # 12. 上传固件产物到 Workflow Artifacts
      - name: Upload firmware
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt_armv7
          path: immortalwrt/bin/targets/*/*

      # 13. 构建完成后清理源码目录，释放剩余空间
      - name: Clean workspace
        if: ${{ always() }}
        run: rm -rf immortalwrt
