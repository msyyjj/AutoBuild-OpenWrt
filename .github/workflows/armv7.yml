name: Build ARMv7 ImmortalWrt (Split Download & Build)

# 触发方式：手动 workflow_dispatch 或通过 repository_dispatch 远程触发
on:
  workflow_dispatch:
  repository_dispatch:

# 并发控制：同一分支只允许一个 job 运行，新的会自动取消前一个
concurrency:
  group: build-armv7-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # === Job 1: 依赖下载与缓存 dl 目录 ===
  download:
    name: Download Dependencies
    runs-on: ubuntu-latest      # 大盘空间 runner
    timeout-minutes: 120             # 超时限制

    # 传递 dl cache key 给 build job
    outputs:
      dl-cache-key: ${{ steps.make-key.outputs.key }}

    steps:
      # step 1: 检出源码
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0              # 完整获取所有分支/标签信息

      # step 2: 清理 runner 空间（移除不需要的目录，释放磁盘）
      - name: Clean system to free disk
        run: |
          sudo rm -rf \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /usr/local/share/boost \
            /usr/local/share/gradle \
            /usr/local/lib/node_modules \
            /home/runner/actions-runner/cached/_diag/*

      # step 3: 安装编译所需工具（只安装必要项，节约空间）
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential curl ca-certificates git

      # step 4: clone ImmortalWrt 并添加所需第三方 feed
      - name: Clone ImmortalWrt & update feeds
        run: |
          git clone --depth=1 https://github.com/immortalwrt/immortalwrt.git
          cd immortalwrt
          {
            echo "src-git helloworld https://github.com/fw876/helloworld.git"
            echo "src-git smpackage https://github.com/kenzok8/small-package.git"
            echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages.git;main"
            echo "src-git passwall_luci https://github.com/xiaorouji/openwrt-passwall.git;main"
          } >> feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # step 5: 生成 dl cache key（基于系统/配置文件 hash，保证唯一性）
      - name: Make dl cache key
        id: make-key
        run: |
          echo "key=${{ runner.os }}-immortalwrt-dl-${{ hashFiles('armv7.config') }}" >> $GITHUB_OUTPUT

      # step 6: 应用 armv7.config 和自定义脚本
      - name: Apply configuration & customize
        working-directory: immortalwrt
        run: |
          [ -e ../armv7.config ] && cp ../armv7.config .config         # 应用配置文件
          [ -f ../customize.sh ] && cp ../customize.sh . && chmod +x customize.sh && ./customize.sh  # 可选自定义处理
          make defconfig                                              # 生成最终 config

      # step 7: 缓存 dl 目录（所有下载的源码包都在此）
      - name: Cache dl directory
        uses: actions/cache@v3
        with:
          path: immortalwrt/dl
          key: ${{ steps.make-key.outputs.key }}
          restore-keys: |
            ${{ steps.make-key.outputs.key }}

      # step 8: 下载所有依赖包（并清理无效的包文件，缩减空间）
      - name: Download all packages
        working-directory: immortalwrt
        run: |
          make download -j$(nproc)                          # 多线程下载
          find dl -type f -size -1024c -delete               # 删除小于1KB的文件（通常是错误/空包）
          find dl -type f -size +100M -delete                # 删除大于100MB的包（防止异常空间占用）

  # === Job 2: 恢复缓存，编译固件，上传产物 ===
  build:
    name: Build Firmware
    needs: download
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      # step 1: 检出源码
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # step 2: 清理 runner 空间
      - name: Clean system to free disk
        run: |
          sudo rm -rf \
            /usr/share/dotnet \
            /usr/local/lib/android \
            /opt/ghc \
            /usr/local/share/boost \
            /usr/local/share/gradle \
            /usr/local/lib/node_modules \
            /home/runner/actions-runner/cached/_diag/*

      # step 3: 安装编译工具
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential curl ca-certificates git

      # step 4: Clone ImmortalWrt
      - name: Clone ImmortalWrt for build
        run: git clone --depth=1 https://github.com/immortalwrt/immortalwrt.git

      # step 5: 恢复 dl 缓存（包含所有依赖包）
      - name: Restore dl cache
        uses: actions/cache@v3
        with:
          path: immortalwrt/dl
          key: ${{ needs.download.outputs.dl-cache-key }}
          restore-keys: |
            ${{ needs.download.outputs.dl-cache-key }}

      # step 6: 应用配置和自定义脚本
      - name: Apply configuration & customize
        working-directory: immortalwrt
        run: |
          [ -e ../armv7.config ] && cp ../armv7.config .config
          [ -f ../customize.sh ] && cp ../customize.sh . && chmod +x customize.sh && ./customize.sh
          make defconfig

      # step 7: 编译过程磁盘动态监控，避免因空间爆满中断
      - name: Dynamic disk monitoring & Build
        working-directory: immortalwrt
        run: |
          # 后台每60秒记录一次磁盘剩余空间，便于分析
          (while true; do
             echo ">>> [Disk Usage $(date)]"
             df -h .
             sleep 60
           done) > ../disk-usage.log &
          MONITOR_PID=$!

          echo "Building on $(nproc) cores"
          make -j$(($(nproc)+1)) > build.log 2>&1 \
            || { tail -n200 build.log; exit 1; }    # 如果编译失败，输出最后200行日志排查

          # 编译完成后关闭监控并输出最后几次磁盘记录
          kill $MONITOR_PID || true
          echo "=== Disk monitor stopped ==="
          tail -n20 ../disk-usage.log

      # step 8: 展示编译产物大小与最终磁盘占用
      - name: Final disk usage & artifact size
        run: |
          echo "Final disk usage:"
          df -h .
          du -sh immortalwrt/bin/targets

      # step 9: 编译完成后清理 dl 目录（可选，节省上传空间）
      - name: Clean dl to free build space
        run: rm -rf immortalwrt/dl

      # step 10: 上传固件产物（所有目标文件夹下的内容）
      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt_armv7
          path: immortalwrt/bin/targets/*/*
